extern "C"
{
	#include "miracl.h"
}
#include "tasofroCrypt.h"
#include <windows.h>
#include <string.h>
#include <array>
#include <vector>

std::vector<std::array<unsigned char, KEY_BYTESIZE> > KEYS_N = {
	// Touhou 13.5
	{
		0xC7, 0x9A, 0x9E, 0x9B, 0xFB, 0xC2, 0x0C, 0xB0, 0xC3, 0xE7, 0xAE, 0x27, 0x49, 0x67, 0x62, 0x8A, 
		0x78, 0xBB, 0xD1, 0x2C, 0xB2, 0x4D, 0xF4, 0x87, 0xC7, 0x09, 0x35, 0xF7, 0x01, 0xF8, 0x2E, 0xE5, 
		0x49, 0x3B, 0x83, 0x6B, 0x84, 0x26, 0xAA, 0x42, 0x9A, 0xE1, 0xCC, 0xEE, 0x08, 0xA2, 0x15, 0x1C, 
		0x42, 0xE7, 0x48, 0xB1, 0x9C, 0xCE, 0x7A, 0xD9, 0x40, 0x1A, 0x4D, 0xD4, 0x36, 0x37, 0x5C, 0x89
	},
	// Touhou 13.5 - English patch
	{
		0xFF, 0x65, 0x72, 0x74, 0x61, 0x69, 0x52, 0x20, 0x2D, 0x2D, 0x20, 0x69, 0x6F, 0x6B, 0x6E, 0x61, 
		0x6C, 0x46, 0x20, 0x73, 0x73, 0x65, 0x6C, 0x42, 0x20, 0x64, 0x6F, 0x47, 0x20, 0x79, 0x61, 0x4D, 
		0x08, 0x8B, 0xF4, 0x75, 0x5D, 0x78, 0xB1, 0xC8, 0x93, 0x7F, 0x40, 0xEA, 0x34, 0xA5, 0x85, 0xC1, 
		0x1B, 0x8D, 0x63, 0x17, 0x75, 0x98, 0x2D, 0xA8, 0x17, 0x45, 0x31, 0x31, 0x51, 0x4F, 0x6E, 0x8D
	},
	// Touhou 14.5
	{
		0xC6, 0x43, 0xE0, 0x9D, 0x35, 0x5E, 0x98, 0x1D, 0xBE, 0x63, 0x6D, 0x3A, 0x5F, 0x84, 0x0F, 0x49,
		0xB8, 0xE8, 0x53, 0xF5, 0x42, 0x06, 0x37, 0x3B, 0x36, 0x25, 0xCB, 0x65, 0xCE, 0xDD, 0x68, 0x8C,
		0xF7, 0x5D, 0x72, 0x0A, 0xC0, 0x47, 0xBD, 0xFA, 0x3B, 0x10, 0x4C, 0xD2, 0x2C, 0xFE, 0x72, 0x03,
		0x10, 0x4D, 0xD8, 0x85, 0x15, 0x35, 0x55, 0xA3, 0x5A, 0xAF, 0xC3, 0x4A, 0x3B, 0xF3, 0xE2, 0x37
	},
	// Touhou 15.5
	{
		0xC4, 0x4D, 0x6A, 0x2F, 0x05, 0x78, 0x2C, 0x0F, 0xD7, 0x5C, 0x82, 0x97, 0x17, 0x60, 0x91, 0xDD,
		0x6F, 0x83, 0x61, 0x81, 0xD1, 0x4E, 0x06, 0x9B, 0x94, 0x37, 0xD2, 0x98, 0x4D, 0xE4, 0x7B, 0xBF,
		0x42, 0x60, 0xA7, 0x8F, 0x88, 0xD6, 0xFD, 0xFE, 0xE1, 0xF5, 0x6A, 0x0B, 0x29, 0xCF, 0x0B, 0xED,
		0x66, 0xF0, 0xAC, 0x4E, 0xD7, 0xEF, 0x96, 0x06, 0x8B, 0xFA, 0x8E, 0x33, 0x48, 0xA3, 0x02, 0x7D
	},
	// MarisaLand Legacy
	{
		0xC1, 0x34, 0x2E, 0x25, 0x96, 0x26, 0xCB, 0x38, 0xB0, 0x39, 0xD1, 0x2F, 0xA2, 0xE4, 0x7A, 0x3B,
		0xDD, 0x7A, 0x7D, 0x1E, 0xF1, 0x2E, 0x7C, 0xFD, 0x75, 0x6D, 0x1F, 0x63, 0x5F, 0x87, 0x9F, 0x20,
		0x02, 0xCE, 0x69, 0x38, 0xCB, 0xAD, 0x01, 0x00, 0x92, 0xCC, 0x1C, 0x93, 0x75, 0x17, 0x35, 0xE2,
		0x69, 0xDF, 0x2B, 0xC5, 0xCE, 0xDC, 0xD6, 0xDD, 0xF7, 0x44, 0x15, 0x19, 0xA3, 0x81, 0x2E, 0x95
	},
	// Shoot Shoot Nitori The Golden
	{
		0xB2, 0xA7, 0x3F, 0x6B, 0xF6, 0x61, 0xB1, 0xCA, 0xDD, 0x33, 0x95, 0xD4, 0x44, 0xB6, 0x5F, 0x85,
		0x6E, 0x82, 0x5F, 0xB7, 0x15, 0x52, 0x80, 0x49, 0x4B, 0x11, 0x99, 0x5A, 0xEC, 0x4E, 0x33, 0xD9,
		0x4D, 0x14, 0x27, 0x67, 0xFB, 0x60, 0x1B, 0x60, 0xD3, 0x24, 0x82, 0xC8, 0xD9, 0xBF, 0x41, 0x4C,
		0xF9, 0x3B, 0x47, 0xB5, 0x2E, 0x7F, 0xFB, 0x8F, 0xA7, 0xE6, 0xDD, 0x22, 0x71, 0x9A, 0xBB, 0x1B
	},
}; // In Big Endian

/*
 * Private key used for older versions of the Th135 static patch.
 * Matches the public key above under Touhou 13.5 - English Patch.
const unsigned char KEY_d[KEY_BYTESIZE] = {
	0xC7, 0x6F, 0x87, 0xDE, 0x1B, 0xC7, 0x6B, 0xEB, 0x56, 0x7B, 0xDB, 0xC8, 0x99, 0xCA, 0x51, 0xCA, 
	0xE0, 0x0B, 0x2F, 0x02, 0x18, 0xC5, 0xC5, 0xB1, 0x29, 0xAC, 0x64, 0x3D, 0x2D, 0xBD, 0xBB, 0x5C, 
	0xDB, 0x67, 0x32, 0xB2, 0x46, 0x86, 0xEE, 0xB6, 0x65, 0x6A, 0x57, 0xF9, 0xDD, 0x4D, 0xEA, 0xFA, 
	0x85, 0xE6, 0x6C, 0x4A, 0xBD, 0x0F, 0x16, 0x82, 0xB8, 0x17, 0x6C, 0x08, 0x6E, 0x98, 0x88, 0x41
};
*/
// Touhou 13.5 original private key, computed by Riatre
const unsigned char KEY_d[KEY_BYTESIZE] = {
	0x34, 0x78, 0x84, 0xF1, 0x64, 0x41, 0x22, 0xAC, 0xE5, 0x12, 0xE6, 0x49, 0x15, 0x96, 0xC3, 0xE4,
	0xBA, 0xD0, 0x44, 0xB0, 0x87, 0x3E, 0xCE, 0xE5, 0x52, 0x81, 0x2D, 0x5A, 0x7D, 0x7E, 0x0C, 0x75,
	0x6A, 0x96, 0x7C, 0xE7, 0x5F, 0xDF, 0x7A, 0x21, 0x86, 0x40, 0x5B, 0x10, 0x43, 0xFD, 0x47, 0xDA,
	0x7B, 0xA7, 0xA4, 0xAC, 0x89, 0x20, 0xA6, 0x93, 0x91, 0x1C, 0x63, 0x5A, 0x83, 0x8E, 0x08, 0x01
};

const unsigned char PaddingBytes[32] = {0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00};

bool mipInitialized = false;
int keyInitialized = -1;
big RSA_N;
big RSA_d;
big RSA_e;

// To initialize only the encrypt part, pass nullptr to this function
int InitRSAKeyPair(const unsigned char* crypted_sample)
{
	miracl* mip = mirsys(128,16);
	mip->IOBASE = 16;

	RSA_e = mirvar(0x10001);
	RSA_d = mirvar(0);
	bytes_to_big(KEY_BYTESIZE,(const char*)KEY_d,RSA_d);
	mipInitialized = true;

	if (crypted_sample)
	{
		// Decryption - guess the correct key
		for (auto& it : KEYS_N)
		{
			RSA_N = mirvar(0);
			bytes_to_big(KEY_BYTESIZE,(const char*)it.data(),RSA_N);

			unsigned char tmp[64] = {0};
			DecryptBlock(crypted_sample,tmp);
			if(memcmp(PaddingBytes,tmp,31) == 0) return 0;
		}
	}
	else
	{
		// Encryption - take the Touhou 13.5 public key
		RSA_N = mirvar(0);
		bytes_to_big(KEY_BYTESIZE,(const char*)KEYS_N[0].data(),RSA_N);
	}
	return -1;
}

int DecryptBlock(const unsigned char* src,unsigned char* dst)
{
	big sint = mirvar(0);
	bytes_to_big(KEY_BYTESIZE,(const char*)src,sint);

	big result = mirvar(0);
	powmod(sint,RSA_e,RSA_N,result);
	big_to_bytes(KEY_BYTESIZE,result,(char*)dst,TRUE);
	return 0;
}

int EncryptBlock(const unsigned char* src,unsigned char* dst)
{
	big sint = mirvar(0);
	bytes_to_big(KEY_BYTESIZE,(const char*)src,sint);

	big result = mirvar(0);
	powmod(sint,RSA_d,RSA_N,result);
	big_to_bytes(KEY_BYTESIZE,result,(char*)dst,TRUE);
	return 0;
}

// auto padding :D
int Encrypt3264(const unsigned char* src,unsigned char* dst,size_t srcLen)
{
	if(srcLen > 0x20) return -1;

	if (false) // TODO: add a command-line switch
	{
		// Th135 - encrypt using the original private key
		if(!mipInitialized) InitRSAKeyPair(nullptr);
		unsigned char tmp[64] = {0};
		memcpy(tmp+0x20,src,srcLen);
		memcpy(tmp,PaddingBytes,0x20);
		EncryptBlock(tmp,dst);
	}
	else
	{
		// Th145 - no encryption
		memcpy(dst, src, srcLen);
		memset(dst + srcLen, 0, 0x40 - srcLen);
	}
	return 0;
}

// By truncating
int Decrypt6432(const unsigned char* src,unsigned char* dst,size_t dstLen)
{
	if(dstLen > 0x20) return -1;

	// Th145 English patch - no encryption
	if (memcmp(src + 0x20, "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", 0x20) == 0)
	{
		memcpy(dst, src, dstLen);
		return 0;
	}

	// Anything else
	if(!mipInitialized && InitRSAKeyPair(src) == -1) return -1;

	unsigned char tmp[64] = {0};
	DecryptBlock(src,tmp);
	if(memcmp(PaddingBytes,tmp,31) != 0) return -1;
	memcpy(dst, tmp + 0x40 - dstLen, dstLen);
	// HM notes: the original th135arc has 31 instead of 32 in the memcmp, and uses tmp+0x20 in the memcpy.
	return 0;
}
